// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  // uncomment next line if you use Prisma <5.10
  // directUrl = env("DATABASE_URL_UNPOOLED")
}


// =====================================
// User 用户表
// =====================================
model User {
  id           Int    @id @default(autoincrement())  // 内部ID,自增id性能优于uuid
  uuid         String @unique @default(uuid())       // 外部UUID,用于API和前端
  username     String @unique                        // 用户名（唯一）
  email        String @unique                        // 邮箱（唯一）
  password     String                               // 加密后的密码
  phoneNumber  String?                              // 手机号（可选）
  nickname     String?                              // 昵称
  avatar_url   String? @default("default_avatar.png") // 头像URL
  role         UserRole @default(USER)              // 角色：USER/ADMIN
  status       UserStatus @default(ACTIVE)          // 状态：ACTIVE/SUSPENDED
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  // 关联关系
  uploaded_media Media[]   // 上传的内容
  comments      Comment[] 
  favorites     Favorite[]
  uploads       Upload[]  // 上传记录

  @@index([username])
  @@index([email])
  @@index([uuid])  // 为UUID添加索引
}

enum UserRole {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

// =====================================
// Media 媒体内容
// =====================================
model Media {
  id          String   @id @default(uuid())
  title       String   @db.VarChar(200)       // 标题
  description String?  @db.VarChar(500)       // 描述
  url         String                          // 原始资源URL
  thumbnail_url String?                       // 缩略图URL
  size        Int                             // 原始文件大小（字节）
  media_type  MediaType                      // 类型：IMAGE/VIDEO
  duration    Int?                           // 视频时长（秒）
  width       Int?                           // 原始视频宽度（像素）
  height      Int?                           // 原始视频高度（像素）
  status      MediaStatus @default(PENDING)  // 审核状态
  views       Int      @default(0)           // 观看次数
  likes_count Int      @default(0)           // 点赞数
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  // 关联关系
  // relation定义模型之间的关联关系，fields: [外键], references: [主键]
  user_id     Int   @map("user_id") // 将 Prisma 模型中的字段名映射到数据库表中的实际列名
  user        User     @relation(fields: [user_id], references: [id]) // 表示通过 user_id 关联到 User 表的 id
  category_id String?
  category    Category? @relation(fields: [category_id], references: [id])
  tags        MediaTag[]
  comments    Comment[]
  favorites   Favorite[]
  video_qualities VideoQuality[] // 新增：视频清晰度关联
  upload      Upload?   // 上传记录（一对一）

  @@index([user_id, status]) // 加速用户内容管理查询
}

enum MediaType {
  IMAGE
  VIDEO
}

enum MediaStatus {
  PENDING   // 待审核
  APPROVED  // 已发布
  REJECTED  // 已拒绝
  PRIVATE   // 用户暂存，不发布
}

// =====================================
// Category、Tag 分类、标签
// =====================================
model Category {
  id          String   @id @default(uuid())
  name        String   @unique @db.VarChar(50) // 分类名称（如"舞台照"、"综艺片段"）
  description String?  @db.VarChar(200)
  created_at  DateTime @default(now())

  // 关联关系
  media      Media[]
}

model Tag {
  id         String    @id @default(uuid())
  name       String    @unique @db.VarChar(30) // 标签名（如"演唱会"、"生日纪念"）
  created_at DateTime  @default(now())

  // 关联关系
  media_tags MediaTag[]
}

model MediaTag {
  media_id String @map("media_id")
  tag_id   String @map("tag_id")
  media    Media  @relation(fields: [media_id], references: [id])
  tag      Tag    @relation(fields: [tag_id], references: [id])

  @@id([media_id, tag_id]) // 复合主键
}

// =====================================
// Comment 评论表
// =====================================
model Comment {
  id              String   @id @default(uuid())
  content         String   @db.VarChar(1000) // 评论内容
  parent_id       String?  // 父评论ID（支持嵌套回复），可为空，表示顶级评论
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // 关联关系
  user_id   Int @map("user_id")
  user      User   @relation(fields: [user_id], references: [id])
  media_id  String @map("media_id")
  media     Media  @relation(fields: [media_id], references: [id])

  // 自关联实现评论树
  replies   Comment[] @relation("CommentReplies") // 包含所有直接回复该评论的子评论
  parent    Comment?  @relation("CommentReplies", fields: [parent_id], references: [id])

  @@index([media_id, created_at]) // 按时间排序评论
}

// =====================================
// Favorite 收藏表
// =====================================
model Favorite {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())

  // 关联关系
  user_id    Int @map("user_id")
  user       User   @relation(fields: [user_id], references: [id])
  media_id   String @map("media_id")
  media      Media  @relation(fields: [media_id], references: [id])

  @@unique([user_id, media_id]) // 禁止重复收藏
}

// 新增：视频清晰度模型
model VideoQuality {
  id          String   @id @default(uuid())
  media_id    String   @map("media_id")
  media       Media    @relation(fields: [media_id], references: [id])
  quality     String   @db.VarChar(20)  // 清晰度标识：如 '1080p', '720p', '480p'
  url         String                    // 转码后的视频URL
  size        Int                       // 转码后的文件大小（字节）
  width       Int                       // 转码后的视频宽度
  height      Int                       // 转码后的视频高度
  bitrate     Int                       // 视频码率（kbps）
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt

  @@index([media_id, quality])
}

// =====================================
// Upload 上传记录表
// =====================================
model Upload {
  id            String   @id @default(uuid())
  filename      String   @db.VarChar(255)     // 原始文件名
  file_size     BigInt                        // 文件大小（字节）
  file_type     String   @db.VarChar(10)      // 文件类型：image/video
  file_md5      String   @db.VarChar(32)      // 文件MD5值
  chunk_size    Int                           // 分片大小
  total_chunks  Int                           // 总分片数
  uploaded_chunks Json   @default("[]")       // 已上传的分片索引数组
  status        UploadStatus @default(PENDING) // 上传状态
  temp_path     String?                       // 临时文件路径
  final_path    String?                       // 最终文件路径
  error_message String?                       // 错误信息
  metadata      Json?                         // 元数据（标题、描述、标签等）
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
  expires_at    DateTime?                     // 过期时间（用于清理未完成的上传）

  // 关联关系
  user_id       Int      @map("user_id")
  user          User     @relation(fields: [user_id], references: [id])
  media_id      String?  @unique              // 关联的媒体ID（上传完成后）
  media         Media?   @relation(fields: [media_id], references: [id])

  @@index([file_md5])
  @@index([user_id, status])
  @@index([expires_at])
}

enum UploadStatus {
  PENDING    // 待上传
  UPLOADING  // 上传中
  MERGING    // 合并中
  COMPLETED  // 已完成
  FAILED     // 失败
  EXPIRED    // 已过期
}